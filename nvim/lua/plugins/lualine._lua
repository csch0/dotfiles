local function get_buffer_count()
	local buffers = vim.fn.execute("buffers")
	local count = 0
	for line in string.gmatch(buffers, "[^\r\n]+") do
		if string.match(line, "^%s*%d+") then
			count = count + 1
		end
	end
	return count
end

local function lazy_updates()
	local checker = require("lazy.manage.checker")
	return #checker.updated
end

local function mason_updates()
	local registry = require("mason-registry")
	local packages = registry.get_installed_packages()

	local count = 0

	--- @param sucess any
	local function callback(sucess, _)
		if sucess then
			count = count + 1
		end
	end

	for _, pkg in pairs(packages) do
		pkg:check_new_version(callback)
	end
	return count
end

local function updates()
	local icon = require("lazy.core.config").options.ui.icons.plugin

	local l = lazy_updates()
	local m = mason_updates()
	return icon .. l .. "/" .. m
end

local function has_updates()
	return lazy_updates() > 0 or mason_updates() > 0
end

return {
	"nvim-lualine/lualine.nvim",
	dependencies = { "nvim-tree/nvim-web-devicons" },
	config = function()
		local lualine = require("lualine")
		lualine.setup({
			options = {
				icons_enabled = true,
				theme = "auto",
			},
			extensions = {
				"oil",
				"mason",
				"neo-tree",
				"lazy",
			},
			sections = {
				lualine_c = {
					{
						"filetype",
						icon_only = true,
						separator = "",
						padding = { left = 1, right = 0 },
					},
					{
						"filename",
						path = 3,
					},
				},
			},
			inactive_sections = {
				lualine_c = {
					{
						"filename",
						path = 3,
					},
				},
				lualine_x = {},
			},
			-- tabline = {
			-- 	lualine_a = {
			-- 		get_buffer_count,
			-- 	},
			-- 	lualine_b = {
			-- 		"filename",
			-- 	},
			-- 	lualine_z = {
			-- 		{
			-- 			updates,
			-- 			cond = has_updates,
			-- 			color = { bg = colors.yellow },
			-- 		},
			-- 	},
			-- },
			-- inactive_winbar = {
			-- 	lualine_a = {
			-- 		get_buffer_count,
			-- 	},
			-- },
		})
	end,
}
